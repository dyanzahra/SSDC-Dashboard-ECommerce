# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/100dzedB2rIIWNOgf8zLMb823_9xAo0GK
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# --- 1. Konfigurasi Halaman Streamlit ---
st.set_page_config(
    page_title="Dasbor E-commerce SSDC 2025",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- 2. Fungsi Memuat Data ---
# Gunakan st.cache_data untuk caching data agar tidak dimuat ulang setiap interaksi
@st.cache_data
def load_all_data():
    try:
        # Memuat setiap file CSV dari folder 'data'
        # PASTIKAN NAMA FILE CSV SESUAI DENGAN YANG ADA DI FOLDER DATA ANDA!
        # Jika ada file yang tidak ada, KOMENTARI BARISNYA atau sesuaikan nama file.
        df_customers = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\customers_dataset.csv")
        df_geolocation = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\geolocation_dataset.csv")
        df_order_items = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\order_items_dataset.csv")
        df_order_payments = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\order_payments_dataset.csv")
        df_order_reviews = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\order_reviews_dataset.csv")
        df_orders = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\orders_dataset.csv")
        df_product_category_name_translation = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\product_category_name_translation.csv")
        df_products = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\products_dataset.csv")
        df_sellers = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\sellers_dataset.csv")
        df_closed_deals = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\closed_deals_dataset.csv") # Tambahan
        df_marketing_qualified_leads = pd.read_csv("D:\Lomba\SSDC_Dashboard_Project\data\marketing_qualified_leads_dataset.csv") # Tambahan

        # --- Gabungan Data Utama untuk Analisis (Berdasarkan ERD Anda) ---
        # Mulai dengan tabel orders sebagai pusat
        df_merged = df_orders.copy()

        # Gabungkan dengan order_items (order_id)
        df_merged = pd.merge(df_merged, df_order_items, on='order_id', how='left')

        # Gabungkan dengan products (product_id)
        df_merged = pd.merge(df_merged, df_products, on='product_id', how='left')

        # Gabungkan dengan product_category_name_translation (product_category_name)
        df_merged = pd.merge(df_merged, df_product_category_name_translation, on='product_category_name', how='left')

        # Gabungkan with order_reviews (order_id)
        df_merged = pd.merge(df_merged, df_order_reviews, on='order_id', how='left')

        # Gabungkan with customers (customer_id)
        df_merged = pd.merge(df_merged, df_customers, on='customer_id', how='left')

        # Gabungkan with sellers (seller_id)
        df_merged = pd.merge(df_merged, df_sellers, on='seller_id', how='left')

        # Gabungkan with order_payments (order_id)
        df_merged = pd.merge(df_merged, df_order_payments, on='order_id', how='left')

        # Gabungkan with marketing_qualified_leads (mql_id)
        # df_merged = pd.merge(df_merged, df_marketing_qualified_leads, on='mql_id', how='left') # Tambahan - Removed due to KeyError

        # Gabungkan with closed_deals (mql_id dan seller_id)
        # Perhatikan: closed_deals juga memiliki seller_id, jadi pastikan merge key-nya benar jika diperlukan
        # df_merged = pd.merge(df_merged, df_closed_deals, on=['mql_id', 'seller_id'], how='left') # Tambahan (sesuaikan jika key berbeda) - Removed due to KeyError


        # Konversi kolom tanggal ke datetime
        date_cols = ['order_purchase_timestamp', 'order_approved_at',
                     'order_delivered_carrier_date', 'order_delivered_customer_date',
                     'order_estimated_delivery_date', 'shipping_limit_date',
                     'review_creation_date', 'review_answer_timestamp'] # Removed 'first_contact_date', 'won_date' as they are not in df_merged
        for col in date_cols:
            if col in df_merged.columns:
                df_merged[col] = pd.to_datetime(df_merged[col], errors='coerce')

        return df_merged, df_customers, df_geolocation, df_order_items, df_order_payments, \
               df_order_reviews, df_orders, df_product_category_name_translation, df_products, df_sellers, \
               df_closed_deals, df_marketing_qualified_leads # Tambahkan ke return

    except FileNotFoundError as e:
        st.error(f"Error: File tidak ditemukan. Pastikan semua file CSV database ada di folder 'data/'. {e}")
        # Removed st.stop()
        return None # Explicitly return None on error


# Memuat semua data
df_main, df_customers, df_geolocation, df_order_items, df_order_payments, \
df_order_reviews, df_orders, df_product_category_name_translation, df_products, df_sellers, \
df_closed_deals, df_marketing_qualified_leads = load_all_data() # Update variabel yang menerima return


# --- 3. Pemrosesan Data Tambahan (Feature Engineering) ---
if df_main is not None and not df_main.empty:
    # Durasi pengiriman aktual
    df_main['delivery_duration_days'] = (df_main['order_delivered_customer_date'] - df_main['order_purchase_timestamp']).dt.days
    # Performa pengiriman (positif = lebih cepat dari estimasi, negatif = lebih lambat)
    df_main['delivery_performance_days'] = (df_main['order_estimated_delivery_date'] - df_main['order_delivered_customer_date']).dt.days


# --- 4. Sidebar untuk Filter dan Navigasi ---
if df_main is not None and not df_main.empty:
    st.sidebar.title("Kontrol Dasbor ⚙️")
    st.sidebar.header("Filter Data")

    # Filter berdasarkan tanggal pembelian
    min_date = df_main['order_purchase_timestamp'].min().date() if not df_main['order_purchase_timestamp'].empty else pd.to_datetime('2016-01-01').date()
    max_date = df_main['order_purchase_timestamp'].max().date() if not df_main['order_purchase_timestamp'].empty else pd.to_datetime('2019-01-01').date()

    date_range = st.sidebar.date_input(
        "Rentang Tanggal Pembelian:",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

    if len(date_range) == 2:
        start_date = pd.to_datetime(date_range[0])
        end_date = pd.to_datetime(date_range[1])
        df_filtered = df_main[(df_main['order_purchase_timestamp'] >= start_date) &
                              (df_main['order_purchase_timestamp'] <= end_date)].copy() # Gunakan .copy() untuk menghindari SettingWithCopyWarning
    else:
        df_filtered = df_main.copy() # Jika rentang tanggal belum lengkap, gunakan semua data

    # Filter kategori produk
    all_categories = df_filtered['product_category_name_english'].dropna().unique().tolist()
    selected_categories = st.sidebar.multiselect(
        "Pilih Kategori Produk:",
        options=all_categories,
        default=all_categories
    )
    df_filtered = df_filtered[df_filtered['product_category_name_english'].isin(selected_categories)]

    # Filter status pesanan
    all_order_statuses = df_filtered['order_status'].dropna().unique().tolist()
    selected_order_statuses = st.sidebar.multiselect(
        "Pilih Status Pesanan:",
        options=all_order_statuses,
        default=all_order_statuses
    )
    df_filtered = df_filtered[df_filtered['order_status'].isin(selected_order_statuses)]


    # --- 5. Judul dan Ringkasan Metrik Utama ---
    st.title("📊 Dasbor E-commerce Sebelas Maret Statistics Fair 2025")
    st.write("Analisis preferensi pembeli, kualitas produk, dan kinerja pengiriman untuk strategi bisnis yang lebih baik.")

    if df_filtered.empty:
        st.warning("Tidak ada data yang tersedia untuk filter yang dipilih. Silakan sesuaikan filter Anda.")
    else:
        col1, col2, col3, col4 = st.columns(4) # 4 columns for 4 main metrics

        with col1:
            total_sales = df_filtered['price'].sum() if 'price' in df_filtered.columns and not df_filtered['price'].isnull().all() else 0
            st.metric("Total Penjualan", f"Rp {total_sales:,.0f}")

        with col2:
            total_orders = df_filtered['order_id'].nunique()
            st.metric("Jumlah Pesanan", total_orders)

        with col3:
            avg_review_score = df_filtered['review_score'].mean() if 'review_score' in df_filtered.columns and not df_filtered['review_score'].isnull().all() else 0
            st.metric("Rata-rata Skor Ulasan", f"{avg_review_score:.2f} / 5")

        with col4:
            avg_delivery_time = df_filtered['delivery_duration_days'].mean() if 'delivery_duration_days' in df_filtered.columns and not df_filtered['delivery_duration_days'].isnull().all() else 0
            st.metric("Rata-rata Waktu Pengiriman", f"{avg_delivery_time:.1f} Hari")

        st.markdown("---")

        # --- 6. Bagian Preferensi Pembeli ---
        st.header("🛍️ Preferensi Pembeli")

        tab1, tab2, tab3 = st.tabs(["Kategori Produk Terlaris", "Distribusi Pelanggan Geografis", "Metode Pembayaran"])

        with tab1:
            st.subheader("Top 10 Kategori Produk Berdasarkan Jumlah Penjualan")
            if 'product_category_name_english' in df_filtered.columns and 'price' in df_filtered.columns:
                top_categories_sales = df_filtered.groupby('product_category_name_english')['price'].sum().nlargest(10).reset_index()
                fig_cat_sales = px.bar(top_categories_sales, x='price', y='product_category_name_english',
                                       labels={'price': 'Total Penjualan (Rp)', 'product_category_name_english': 'Kategori Produk'},
                                       title='Top 10 Kategori Produk (Total Penjualan)',
                                       orientation='h', color='price', color_continuous_scale=px.colors.sequential.Viridis)
                fig_cat_sales.update_layout(yaxis={'categoryorder':'total ascending'})
                st.plotly_chart(fig_cat_sales, use_container_width=True)
            else:
                st.info("Data kategori produk atau penjualan tidak tersedia untuk visualisasi ini.")

        with tab2:
            st.subheader("Distribusi Pelanggan Berdasarkan Provinsi")
            if 'customer_state' in df_filtered.columns:
                customer_state_dist = df_filtered['customer_state'].value_counts().nlargest(10).reset_index()
                customer_state_dist.columns = ['customer_state', 'count']
                fig_state = px.bar(customer_state_dist, x='count', y='customer_state',
                                   labels={'count': 'Jumlah Pelanggan', 'customer_state': 'Provinsi'},
                                   title='Top 10 Provinsi dengan Pelanggan Terbanyak',
                                   orientation='h', color='count', color_continuous_scale=px.colors.sequential.Plasma) # Changed color scale to 'Plasma'
                fig_state.update_layout(yaxis={'categoryorder':'total ascending'})
                st.plotly_chart(fig_state, use_container_width=True)
            else:
                st.info("Data provinsi pelanggan tidak tersedia untuk visualisasi ini.")

        with tab3:
            st.subheader("Metode Pembayaran Paling Umum")
            if 'payment_type' in df_filtered.columns:
                payment_type_counts = df_filtered['payment_type'].value_counts().reset_index()
                payment_type_counts.columns = ['payment_type', 'count']
                fig_payment = px.pie(payment_type_counts, names='payment_type', values='count',
                                     title='Distribusi Metode Pembayaran')
                st.plotly_chart(fig_payment, use_container_width=True)
            else:
                st.info("Data metode pembayaran tidak tersedia untuk visualisasi ini.")

        st.markdown("---")

        # --- 7. Bagian Kualitas Produk ---
        st.header("⭐ Kualitas Produk")

        tab4, tab5 = st.tabs(["Distribusi Skor Ulasan", "Kategori dengan Ulasan Rendah"])

        with tab4:
            st.subheader("Distribusi Skor Ulasan Produk")
            if 'review_score' in df_filtered.columns:
                review_score_counts = df_filtered['review_score'].value_counts().sort_index().reset_index()
                review_score_counts.columns = ['review_score', 'count']
                fig_review = px.bar(review_score_counts, x='review_score', y='count',
                                     labels={'review_score': 'Skor Ulasan', 'count': 'Jumlah Ulasan'},
                                     title='Distribusi Skor Ulasan',
                                     color='review_score', color_continuous_scale=px.colors.sequential.Plasma)
                st.plotly_chart(fig_review, use_container_width=True)
            else:
                st.info("Data skor ulasan tidak tersedia for this visualization.")

        with tab5:
            st.subheader("Kategori Produk dengan Rata-rata Skor Ulasan Terendah (Top 5)")
            if 'product_category_name_english' in df_filtered.columns and 'review_score' in df_filtered.columns:
                avg_review_per_category = df_filtered.groupby('product_category_name_english')['review_score'].mean().nsmallest(5).reset_index()
                fig_low_review = px.bar(avg_review_per_category, x='product_category_name_english', y='review_score',
                                        labels={'product_category_name_english': 'Kategori Produk', 'review_score': 'Rata-rata Skor Ulasan'},
                                        title='Kategori Produk dengan Rata-rata Skor Ulasan Terendah',
                                        color='review_score', color_continuous_scale=px.colors.sequential.Reds)
                st.plotly_chart(fig_low_review, use_container_width=True)

                st.subheader("Contoh Ulasan Negatif (Skor 1 atau 2)")
                # Ambil ulasan negatif dari df_filtered
                low_score_reviews = df_filtered[df_filtered['review_score'].isin([1, 2])][['product_category_name_english', 'review_comment_message']].dropna().drop_duplicates().sample(min(5, len(df_filtered[df_filtered['review_score'].isin([1, 2])])))
                if not low_score_reviews.empty:
                    for index, row in low_score_reviews.iterrows():
                        st.markdown(f"**Kategori:** {row['product_category_name_english']}")
                        st.text(f"Ulasan: {row['review_comment_message']}")
                        st.markdown("---")
                else:
                    st.info("Tidak ada ulasan dengan skor 1 atau 2 untuk filter yang dipilih.")
            else:
                st.info("Data kategori produk atau skor ulasan tidak tersedia for this visualization.")

        st.markdown("---")

        # --- 8. Bagian Kinerja Pengiriman ---
        st.header("🚚 Kinerja Pengiriman")

        tab6, tab7 = st.tabs(["Durasi Pengiriman", "Performa Estimasi Pengiriman"])

        with tab6:
            st.subheader("Distribusi Durasi Pengiriman (Hari)")
            if 'delivery_duration_days' in df_filtered.columns:
                fig_delivery_dist = px.histogram(df_filtered.dropna(subset=['delivery_duration_days']), x='delivery_duration_days',
                                                 nbins=30,
                                                 labels={'delivery_duration_days': 'Durasi Pengiriman (Hari)', 'count': 'Jumlah Pesanan'},
                                                 title='Distribusi Durasi Pengiriman')
                st.plotly_chart(fig_delivery_dist, use_container_width=True)
            else:
                st.info("Data durasi pengiriman tidak tersedia for this visualization.")

        with tab7:
            st.subheader("Performa Pengiriman Terhadap Estimasi (Hari)")
            st.info("Nilai positif berarti pengiriman lebih cepat dari estimasi, negatif berarti lebih lambat.")
            if 'delivery_performance_days' in df_filtered.columns:
                fig_delivery_perf = px.histogram(df_filtered.dropna(subset=['delivery_performance_days']), x='delivery_performance_days',
                                                 nbins=30,
                                                 labels={'delivery_performance_days': 'Selisih (Estimasi - Aktual) dalam Hari', 'count': 'Jumlah Pesanan'},
                                                 title='Performa Pengiriman Terhadap Estimasi')
                st.plotly_chart(fig_delivery_perf, use_container_width=True)
            else:
                st.info("Data performa pengiriman tidak tersedia for this visualization.")

        st.markdown("---")

        # --- 9. Rekomendasi Bisnis ---
        st.header("🚀 Rekomendasi Strategis untuk Peningkatan Perusahaan")

        st.write("""
        Berdasarkan analisis komprehensif dari dasbor ini, kami mengidentifikasi **Peningkatan Kualitas Produk** sebagai aspek prioritas utama untuk dioptimalkan. Fokus harus diberikan pada kategori produk yang secara konsisten menerima skor ulasan rendah dan ulasan negatif.
        """)

        st.subheader("Alasan Prioritas:")
        st.markdown("""
        * **Dampak Langsung pada Kepuasan Pelanggan:** Data menunjukkan bahwa beberapa kategori produk utama (misalnya, lihat bagian "Kategori dengan Ulasan Rendah" di atas) memiliki rata-rata skor ulasan yang signifikan lebih rendah dibandingkan kategori lain. Ini adalah indikator langsung ketidakpuasan pelanggan.
        * **Potensi Kehilangan Penjualan:** Ulasan negatif dan skor rendah dapat menghambat keputusan pembelian calon pelanggan, yang berujung pada hilangnya potensi penjualan dan pangsa pasar.
        * **Biaya Operasional:** Produk dengan masalah kualitas seringkali menyebabkan pengembalian, penggantian, dan biaya layanan pelanggan yang lebih tinggi.
        """)

        st.subheader("Dampak Potensial jika Ditingkatkan:")
        st.markdown("""
        * **Peningkatan Loyalitas dan Retensi Pelanggan:** Produk berkualitas tinggi akan meningkatkan kepercayaan pelanggan dan mendorong pembelian berulang.
        * **Reputasi Merek yang Kuat:** Perusahaan akan dikenal sebagai penyedia produk yang handal dan berkualitas.
        * **Pertumbuhan Penjualan Organik:** Ulasan positif dan rekomendasi dari mulut ke mulut akan menarik pelanggan baru tanpa biaya pemasaran tambahan yang besar.
        * **Optimalisasi Biaya:** Mengurangi biaya yang terkait dengan penanganan keluhan dan pengembalian produk.
        """)

        st.markdown("---")
        st.info("Dasbor ini dibuat untuk lomba Sebelas Maret Statistics Dashboard Competition (SSDC) 2025.")